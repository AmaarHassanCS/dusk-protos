"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v3.11.4
// source: proto/users/user.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserServiceClient = exports.UserServiceService = exports.RegisterUserResponse = exports.RegisterUserRequest = exports.ServiceResponse = exports.protobufPackage = void 0;
/* eslint-disable */
const grpc_js_1 = require("@grpc/grpc-js");
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const struct_1 = require("../../google/protobuf/struct");
exports.protobufPackage = "user";
function createBaseServiceResponse() {
    return { statusCode: 0, message: "", data: undefined };
}
exports.ServiceResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.statusCode !== 0) {
            writer.uint32(8).int32(message.statusCode);
        }
        if (message.message !== "") {
            writer.uint32(18).string(message.message);
        }
        if (message.data !== undefined) {
            struct_1.Struct.encode(struct_1.Struct.wrap(message.data), writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseServiceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.statusCode = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.data = struct_1.Struct.unwrap(struct_1.Struct.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            statusCode: isSet(object.statusCode) ? globalThis.Number(object.statusCode) : 0,
            message: isSet(object.message) ? globalThis.String(object.message) : "",
            data: isObject(object.data) ? object.data : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.statusCode !== 0) {
            obj.statusCode = Math.round(message.statusCode);
        }
        if (message.message !== "") {
            obj.message = message.message;
        }
        if (message.data !== undefined) {
            obj.data = message.data;
        }
        return obj;
    },
    create(base) {
        return exports.ServiceResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseServiceResponse();
        message.statusCode = (_a = object.statusCode) !== null && _a !== void 0 ? _a : 0;
        message.message = (_b = object.message) !== null && _b !== void 0 ? _b : "";
        message.data = (_c = object.data) !== null && _c !== void 0 ? _c : undefined;
        return message;
    },
};
function createBaseRegisterUserRequest() {
    return { firstName: "", lastName: "", email: "", phone: "", role: "", password: "" };
}
exports.RegisterUserRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.firstName !== "") {
            writer.uint32(10).string(message.firstName);
        }
        if (message.lastName !== "") {
            writer.uint32(18).string(message.lastName);
        }
        if (message.email !== "") {
            writer.uint32(26).string(message.email);
        }
        if (message.phone !== "") {
            writer.uint32(34).string(message.phone);
        }
        if (message.role !== "") {
            writer.uint32(42).string(message.role);
        }
        if (message.password !== "") {
            writer.uint32(50).string(message.password);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRegisterUserRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.firstName = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.lastName = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.email = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.phone = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.role = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.password = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
            lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
            email: isSet(object.email) ? globalThis.String(object.email) : "",
            phone: isSet(object.phone) ? globalThis.String(object.phone) : "",
            role: isSet(object.role) ? globalThis.String(object.role) : "",
            password: isSet(object.password) ? globalThis.String(object.password) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.firstName !== "") {
            obj.firstName = message.firstName;
        }
        if (message.lastName !== "") {
            obj.lastName = message.lastName;
        }
        if (message.email !== "") {
            obj.email = message.email;
        }
        if (message.phone !== "") {
            obj.phone = message.phone;
        }
        if (message.role !== "") {
            obj.role = message.role;
        }
        if (message.password !== "") {
            obj.password = message.password;
        }
        return obj;
    },
    create(base) {
        return exports.RegisterUserRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseRegisterUserRequest();
        message.firstName = (_a = object.firstName) !== null && _a !== void 0 ? _a : "";
        message.lastName = (_b = object.lastName) !== null && _b !== void 0 ? _b : "";
        message.email = (_c = object.email) !== null && _c !== void 0 ? _c : "";
        message.phone = (_d = object.phone) !== null && _d !== void 0 ? _d : "";
        message.role = (_e = object.role) !== null && _e !== void 0 ? _e : "";
        message.password = (_f = object.password) !== null && _f !== void 0 ? _f : "";
        return message;
    },
};
function createBaseRegisterUserResponse() {
    return { data: undefined };
}
exports.RegisterUserResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.data !== undefined) {
            exports.ServiceResponse.encode(message.data, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRegisterUserResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.data = exports.ServiceResponse.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { data: isSet(object.data) ? exports.ServiceResponse.fromJSON(object.data) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.data !== undefined) {
            obj.data = exports.ServiceResponse.toJSON(message.data);
        }
        return obj;
    },
    create(base) {
        return exports.RegisterUserResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseRegisterUserResponse();
        message.data = (object.data !== undefined && object.data !== null)
            ? exports.ServiceResponse.fromPartial(object.data)
            : undefined;
        return message;
    },
};
exports.UserServiceService = {
    registerCustomer: {
        path: "/user.UserService/RegisterCustomer",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.RegisterUserRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.RegisterUserRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.ServiceResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.ServiceResponse.decode(value),
    },
};
exports.UserServiceClient = (0, grpc_js_1.makeGenericClientConstructor)(exports.UserServiceService, "user.UserService");
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
